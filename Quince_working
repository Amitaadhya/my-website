<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>QUINCE PO Data Portal</title>
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <style>
    :root {
      --primary: #6a11cb; --secondary: #2575fc; --dark: #0f172a; --darker: #0b1120;
      --light: #f8fafc; --accent: #f43f5e; --success: #10b981; --warning: #f59e0b;
      --info: #3b82f6; --purple: #8b5cf6; --pink: #ec4899; --cyan: #06b6d4;
      --particle-float-x: 1000px;
    }
    * { margin: 0; padding: 0; box-sizing: border-box; }
    body {
      font-family: 'Poppins', sans-serif; background: linear-gradient(135deg, var(--dark), var(--darker));
      color: var(--light); min-height: 100vh; display: flex; flex-direction: column;
      line-height: 1.6; overflow-x: hidden;
    }
    .particles { position: fixed; top: 0; left: 0; width: 100%; height: 100%; z-index: -1; overflow: hidden; }
    .particle { position: absolute; background: rgba(255, 255, 255, 0.4); border-radius: 50%; pointer-events: none; animation: float 15s infinite linear; filter: blur(1px); }
    @keyframes float {
      0% { transform: translateY(0) translateX(0) rotate(0deg); opacity: 1; }
      100% { transform: translateY(-1000px) translateX(var(--particle-float-x)) rotate(720deg); opacity: 0; }
    }
    header {
      width: 100%; padding: 15px 30px; background: rgba(15, 23, 42, 0.9); backdrop-filter: blur(10px);
      position: fixed; top: 0; left: 0; z-index: 999; display: flex; justify-content: space-between;
      align-items: center; box-shadow: 0 5px 20px rgba(0, 0, 0, 0.3); border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    }
    .logo { display: flex; align-items: center; gap: 10px; }
    .logo i { font-size: 1.8rem; color: var(--accent); }
    h1 {
      font-size: 1.8rem; font-weight: 700; background: linear-gradient(90deg, var(--accent), #f472b6, #a78bfa);
      -webkit-background-clip: text; background-clip: text; color: transparent;
      background-size: 300% 300%; animation: gradient 8s ease infinite;
    }
    @keyframes gradient { 0% { background-position: 0% 50%; } 50% { background-position: 100% 50%; } 100% { background-position: 0% 50%; } }
    .header-info { display: flex; align-items: center; gap: 20px; }
    .header-info p { margin: 0; font-size: 0.9rem; color: rgba(255, 255, 255, 0.8); }
    .header-buttons { display: flex; gap: 10px; }
    .header-btn {
      padding: 8px 15px; background: linear-gradient(135deg, var(--primary), var(--secondary)); color: #fff;
      border: none; border-radius: 30px; cursor: pointer; font-size: 0.8rem; font-weight: 500;
      transition: all 0.3s ease; display: flex; align-items: center; gap: 5px;
      box-shadow: 0 4px 15px rgba(106, 17, 203, 0.3);
    }
    .header-btn:hover { transform: translateY(-2px); box-shadow: 0 6px 20px rgba(106, 17, 203, 0.4); }
    .header-btn i { font-size: 0.9rem; }
    #userManagementBtn { display: none; }

    .popup {
      position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0, 0, 0, 0.8);
      backdrop-filter: blur(5px); display: flex; justify-content: center; align-items: center;
      z-index: 1000; animation: fadeIn 0.3s ease;
    }
    @keyframes fadeIn { from { opacity: 0; } to { opacity: 1; } }
    .popup-content {
      background: linear-gradient(145deg, #1e1e2e, #2a2a3e); padding: 30px; border-radius: 15px;
      width: 90%; max-width: 400px; box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5);
      animation: popupFadeIn 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);
      border: 1px solid rgba(255, 255, 255, 0.1);
    }
    @keyframes popupFadeIn { from { opacity: 0; transform: scale(0.9); } to { opacity: 1; transform: scale(1); } }
    .popup-header { color: #fff; font-size: 1.5rem; margin-bottom: 20px; text-align: center; font-weight: 600; }
    .input-group { margin-bottom: 20px; }
    .input-group label { display: block; color: rgba(255, 255, 255, 0.8); margin-bottom: 8px; font-size: 0.9rem; }
    .input-group input, .input-group select {
      width: 100%; padding: 12px 15px; background: rgba(0, 0, 0, 0.3);
      border: 1px solid rgba(255, 255, 255, 0.1); border-radius: 8px; font-size: 1rem; color: #fff;
      transition: all 0.3s ease;
    }
    .input-group select option { background-color: var(--darker); color: var(--light); }
    .input-group input:focus, .input-group select:focus {
      outline: none; border-color: var(--primary); box-shadow: 0 0 0 3px rgba(106, 17, 203, 0.2);
    }
    .checkbox-group { display: flex; align-items: center; margin-bottom: 20px; }
    .checkbox-group input[type="checkbox"] { margin-right: 10px; accent-color: var(--primary); }
    .checkbox-group label { color: rgba(255, 255, 255, 0.8); font-size: 0.9rem; }
    .login-btn, .action-btn {
      width: 100%; padding: 12px; background: linear-gradient(135deg, var(--primary), var(--secondary));
      color: #fff; border: none; border-radius: 8px; font-size: 1rem; font-weight: 500; cursor: pointer;
      transition: all 0.3s ease; margin-bottom: 15px; box-shadow: 0 4px 15px rgba(106, 17, 203, 0.3);
    }
    .login-btn:hover, .action-btn:hover { transform: translateY(-2px); box-shadow: 0 6px 20px rgba(106, 17, 203, 0.4); }
    .action-btn.secondary { background: linear-gradient(135deg, var(--accent), var(--pink)); box-shadow: 0 4px 15px rgba(244, 63, 94, 0.3); }
    .action-btn.secondary:hover { box-shadow: 0 6px 20px rgba(244, 63, 94, 0.4); }
    .forgot-password { text-align: center; margin-top: 10px; }
    .forgot-password a { color: var(--accent); text-decoration: none; font-size: 0.9rem; transition: all 0.3s ease; }
    .forgot-password a:hover { text-decoration: underline; }
    .error-message, .success-message {
      font-size: 0.9rem; margin-top: 10px; text-align: center; display: none; padding: 8px; border-radius: 5px;
    }
    .error-message { color: #ff6b6b; background-color: rgba(255, 107, 107, 0.1); border: 1px solid rgba(255,107,107,0.3); }
    .success-message { color: var(--success); background-color: rgba(16, 185, 129, 0.1); border: 1px solid rgba(16,185,129,0.3); }

    .container { display: none; flex: 1; max-width: 1400px; width: 100%; padding: 100px 20px 40px; margin: 0 auto; }
    
    #dashboardOverviewSection, #recentLinksSection { display: none; /* Hidden by default, JS shows for admin */ }

    .dashboard-overview { display: grid; grid-template-columns: repeat(auto-fill, minmax(250px, 1fr)); gap: 20px; margin-bottom: 30px; }
    .overview-card {
      background: rgba(15, 23, 42, 0.6); backdrop-filter: blur(10px); border-radius: 12px; padding: 20px;
      border: 1px solid rgba(255, 255, 255, 0.1); transition: all 0.3s ease;
    }
    .overview-card:hover { transform: translateY(-5px); box-shadow: 0 10px 25px rgba(0, 0, 0, 0.3); }
    .overview-card h3 { font-size: 0.9rem; color: rgba(255, 255, 255, 0.7); margin-bottom: 10px; display: flex; align-items: center; gap: 8px; }
    .overview-card h3 i { font-size: 1rem; }
    .overview-card p { font-size: 1.5rem; font-weight: 600; margin: 0; }
    .overview-card .card-footer { font-size: 0.8rem; color: rgba(255, 255, 255, 0.6); margin-top: 10px; display: flex; align-items: center; gap: 5px; }

    .search-filter-container { display: flex; justify-content: space-between; margin-bottom: 30px; gap: 20px; flex-wrap: wrap; }
    .search-container { flex: 1; min-width: 250px; }
    .search-bar { position: relative; width: 100%; }
    .search-bar input {
      width: 100%; padding: 12px 15px 12px 45px; background: rgba(255, 255, 255, 0.1);
      border: 1px solid rgba(255, 255, 255, 0.2); border-radius: 30px; font-size: 0.9rem; color: #fff;
      transition: all 0.3s ease;
    }
    .search-bar input:focus { outline: none; background: rgba(255, 255, 255, 0.15); box-shadow: 0 0 0 3px rgba(106, 17, 203, 0.2); }
    .search-bar i { position: absolute; left: 15px; top: 50%; transform: translateY(-50%); color: rgba(255, 255, 255, 0.7); font-size: 1rem; }
    .filter-tags { display: flex; gap: 10px; flex-wrap: wrap; }
    .filter-tag {
      padding: 8px 15px; background: rgba(255, 255, 255, 0.1); border-radius: 30px; font-size: 0.8rem;
      cursor: pointer; transition: all 0.3s ease; border: 1px solid rgba(255, 255, 255, 0.1);
    }
    .filter-tag:hover, .filter-tag.active { background: linear-gradient(135deg, var(--primary), var(--secondary)); box-shadow: 0 4px 15px rgba(106, 17, 203, 0.3); }

    .section-header { display: flex; justify-content: space-between; align-items: center; margin: 30px 0 15px; padding-bottom: 10px; border-bottom: 1px solid rgba(255, 255, 255, 0.1); }
    .section-header h2 { font-size: 1.3rem; font-weight: 600; display: flex; align-items: center; gap: 10px; }
    .section-header h2 i { color: var(--accent); }

    .button-grid { display: grid; grid-template-columns: repeat(auto-fill, minmax(280px, 1fr)); gap: 20px; }
    .btn {
      position: relative; display: flex; align-items: center; padding: 18px 20px; color: #fff;
      border-radius: 12px; text-decoration: none; font-size: 0.9rem; font-weight: 500;
      transition: opacity 0.3s ease, transform 0.3s cubic-bezier(0.25, 0.8, 0.25, 1), filter 0.3s ease;
      overflow: hidden; box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2); border: none; cursor: pointer; z-index: 1;
    }
    .btn::before {
      content: ''; position: absolute; top: 0; left: 0; width: 100%; height: 100%;
      background: linear-gradient(135deg, rgba(255,255,255,0.1), transparent); z-index: -1; transition: all 0.3s ease;
    }
    .btn::after {
      content: ''; position: absolute; top: 0; left: 0; width: 100%; height: 100%;
      background: inherit; z-index: -2; border-radius: inherit;
    }
    .btn:not(.globally-disabled-admin-view):hover { transform: translateY(-5px); box-shadow: 0 10px 25px rgba(0, 0, 0, 0.3); }
    .btn:not(.globally-disabled-admin-view):hover::before { background: linear-gradient(135deg, rgba(255,255,255,0.2), transparent); }
    .btn i:first-child { margin-right: 12px; font-size: 1.2rem; }
    .btn .btn-text { flex-grow: 1; text-align: left; margin-right: 5px; }
    .btn-tag {
      position: absolute; top: 10px; right: 10px; background: rgba(0, 0, 0, 0.3);
      padding: 3px 8px; border-radius: 30px; font-size: 0.7rem; font-weight: 500;
    }

    body.admin-mode .btn.globally-disabled-admin-view {
      opacity: 0.6; filter: grayscale(60%) brightness(0.7); cursor: default;
    }
    body.admin-mode .btn.globally-disabled-admin-view:hover { transform: none; }
    body.admin-mode .btn.globally-disabled-admin-view::before { display: none; }

    .admin-toggle { margin-left: auto; padding-left: 10px; font-size: 1.3em; cursor: pointer; z-index: 5; display: none; }
    body.admin-mode .admin-toggle { display: inline-block; }
    .admin-toggle i.fa-toggle-on { color: var(--accent); }
    .admin-toggle i.fa-toggle-off { color: var(--success); }

    .btn-1 { background: linear-gradient(135deg, #6a11cb, #2575fc); } .btn-2 { background: linear-gradient(135deg, #ec4899, #f43f5e); }
    .btn-3 { background: linear-gradient(135deg, #10b981, #059669); } .btn-4 { background: linear-gradient(135deg, #3b82f6, #1d4ed8); }
    .btn-5 { background: linear-gradient(135deg, #f59e0b, #d97706); } .btn-6 { background: linear-gradient(135deg, #8b5cf6, #7c3aed); }
    .btn-7 { background: linear-gradient(135deg, #06b6d4, #0891b2); } .btn-8 { background: linear-gradient(135deg, #f97316, #ea580c); }
    .btn-9 { background: linear-gradient(135deg, #e879f9, #c026d3); } .btn-10 { background: linear-gradient(135deg, #0ea5e9, #0284c7); }
    .btn-11 { background: linear-gradient(135deg, #84cc16, #65a30d); } .btn-12 { background: linear-gradient(135deg, #facc15, #eab308); }
    .btn-13 { background: linear-gradient(135deg, #a855f7, #9333ea); } .btn-14 { background: linear-gradient(135deg, #60a5fa, #3b82f6); }
    .btn-15 { background: linear-gradient(135deg, #f472b6, #ec4899); } .btn-16 { background: linear-gradient(135deg, #2dd4bf, #14b8a6); }
    .btn-17 { background: linear-gradient(135deg, #34d399, #10b981); } .btn-18 { background: linear-gradient(135deg, #fb923c, #f97316); }
    .btn-19 { background: linear-gradient(135deg, #818cf8, #6366f1); } .btn-20 { background: linear-gradient(135deg, #a78bfa, #8b5cf6); }
    .btn-21 { background: linear-gradient(135deg, #38bdf8, #0ea5e9); } .btn-22 { background: linear-gradient(135deg, #fbbf24, #f59e0b); }
    .btn-23 { background: linear-gradient(135deg, #22d3ee, #06b6d4); } .btn-24 { background: linear-gradient(135deg, #c084fc, #a855f7); }
    .btn-25 { background: linear-gradient(135deg, #4f46e5, #4338ca); } .btn-26 { background: linear-gradient(135deg, #f43f5e, #e11d48); }
    .btn-27 { background: linear-gradient(135deg, #14b8a6, #0d9488); } .btn-28 { background: linear-gradient(135deg, #f59e0b, #d97706); }

    .quick-access { display: flex; gap: 15px; margin-bottom: 30px; flex-wrap: wrap; }
    .quick-btn {
      padding: 10px 20px; background: rgba(255, 255, 255, 0.1); border-radius: 30px; font-size: 0.9rem;
      cursor: pointer; transition: all 0.3s ease; border: 1px solid rgba(255, 255, 255, 0.1);
      display: flex; align-items: center; gap: 8px;
    }
    .quick-btn:hover { background: linear-gradient(135deg, var(--primary), var(--secondary)); box-shadow: 0 4px 15px rgba(106, 17, 203, 0.3); }

    .recent-links { margin-top: 40px; }
    .recent-grid { display: grid; grid-template-columns: repeat(auto-fill, minmax(280px, 1fr)); gap: 15px; }
    .recent-item {
      background: rgba(15, 23, 42, 0.6); backdrop-filter: blur(10px); border-radius: 10px; padding: 15px;
      border: 1px solid rgba(255, 255, 255, 0.1); transition: all 0.3s ease;
      display: flex; align-items: center; gap: 12px; cursor: pointer;
    }
    .recent-item:hover { transform: translateY(-3px); box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2); }
    .recent-icon {
      width: 40px; height: 40px; border-radius: 8px; display: flex; align-items: center; justify-content: center;
      background: linear-gradient(135deg, var(--primary), var(--secondary));
    }
    .recent-icon i { font-size: 1.2rem; color: white; }
    .recent-info h4 { font-size: 0.9rem; margin-bottom: 5px; }
    .recent-info p { font-size: 0.8rem; color: rgba(255, 255, 255, 0.7); }

    footer {
      display: none; width: 100%; padding: 20px; background: rgba(15, 23, 42, 0.8); backdrop-filter: blur(10px);
      text-align: center; font-size: 0.9rem; color: rgba(255, 255, 255, 0.7);
      border-top: 1px solid rgba(255, 255, 255, 0.1);
    }
    .footer-content { max-width: 1200px; margin: 0 auto; display: flex; flex-direction: column; align-items: center; }
    .social-links { display: flex; gap: 15px; margin-top: 10px; }
    .social-links a { color: #fff; font-size: 1.2rem; transition: all 0.3s ease; }
    .social-links a:hover { color: var(--accent); transform: translateY(-3px); }

    #backToTop {
      position: fixed; bottom: 30px; right: 30px; width: 50px; height: 50px;
      background: linear-gradient(135deg, var(--primary), var(--secondary)); color: #fff;
      border: none; border-radius: 50%; cursor: pointer; font-size: 1.2rem;
      transition: all 0.3s ease; box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3); z-index: 99;
      display: none; align-items: center; justify-content: center;
    }
    #backToTop:hover { transform: translateY(-3px) scale(1.05); box-shadow: 0 8px 20px rgba(0, 0, 0, 0.4); }

    .notification {
      position: fixed; bottom: 30px; left: 50%; transform: translateX(-50%);
      color: #fff; padding: 12px 25px; border-radius: 30px; display: none; z-index: 1000;
      box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3); animation: slideUp 0.3s ease;
    }
    @keyframes slideUp { from { transform: translateX(-50%) translateY(100px); opacity: 0; } to { transform: translateX(-50%) translateY(0); opacity: 1; } }

    .modal {
      display: none; position: fixed; z-index: 1001; left: 0; top: 0; width: 100%; height: 100%;
      overflow: auto; background-color: rgba(0,0,0,0.7); backdrop-filter: blur(5px); animation: fadeInModal 0.3s ease;
    }
    @keyframes fadeInModal { from { opacity: 0; } to { opacity: 1; } }
    .modal-content {
      background: linear-gradient(145deg, var(--darker), #1a233a); margin: 5% auto; padding: 25px;
      border: 1px solid rgba(255,255,255,0.1); border-radius: 15px; width: 90%; max-width: 700px;
      box-shadow: 0 10px 30px rgba(0,0,0,0.5); color: var(--light);
    }
    .modal-header { display: flex; justify-content: space-between; align-items: center; padding-bottom: 15px; margin-bottom: 20px; border-bottom: 1px solid rgba(255,255,255,0.1); }
    .modal-header h2 { font-size: 1.5rem; font-weight: 600; margin: 0; }
    .close-btn { color: rgba(255,255,255,0.7); font-size: 1.8rem; font-weight: bold; transition: color 0.3s ease; }
    .close-btn:hover, .close-btn:focus { color: var(--accent); text-decoration: none; cursor: pointer; }
    .user-management-grid { display: grid; grid-template-columns: 1fr; gap: 30px; }
    .user-management-section { background-color: rgba(0,0,0,0.2); padding: 20px; border-radius: 10px; border: 1px solid rgba(255,255,255,0.05); }
    .user-management-section h3 { margin-top: 0; margin-bottom: 15px; font-size: 1.2rem; border-bottom: 1px solid rgba(255,255,255,0.1); padding-bottom: 8px; }
    #permissionsList { max-height: 300px; overflow-y: auto; padding-right: 10px; }
    #permissionsList .permission-item { display: flex; align-items: center; padding: 8px 0; border-bottom: 1px solid rgba(255,255,255,0.05); }
    #permissionsList .permission-item:last-child { border-bottom: none; }
    #permissionsList .permission-item i { margin-right: 8px; color: var(--info); }
    #permissionsList .permission-item label { flex-grow: 1; margin-left: 5px; font-size: 0.9rem; cursor:pointer;} /* Reduced margin-left */
    #permissionsList .permission-item input[type="checkbox"] { transform: scale(1.1); accent-color: var(--primary); cursor:pointer; margin-right: 5px;}


    @media (min-width: 768px) { .user-management-grid { grid-template-columns: 1fr 1.5fr; } }
    @media (max-width: 1200px) { .dashboard-overview { grid-template-columns: repeat(auto-fill, minmax(200px, 1fr)); } }
    @media (max-width: 992px) { .button-grid { grid-template-columns: repeat(auto-fill, minmax(250px, 1fr)); } }
    @media (max-width: 768px) {
      header { flex-direction: column; padding: 15px; gap: 10px; }
      .header-info { flex-direction: column; gap: 5px; }
      h1 { font-size: 1.5rem; } .search-bar { width: 100%; }
      .btn { padding: 15px; font-size: 0.85rem; } .btn i:first-child { font-size: 1rem; margin-right: 10px; } /* Target only first icon in btn */
      .dashboard-overview { grid-template-columns: 1fr 1fr; }
    }
    @media (max-width: 576px) {
      .button-grid { grid-template-columns: 1fr; }
      .popup-content, .modal-content { padding: 20px; margin: 10% auto; }
      .btn { padding: 14px; } .dashboard-overview { grid-template-columns: 1fr; }
      .search-filter-container { flex-direction: column; } .user-management-grid { grid-template-columns: 1fr; }
    }
  </style>
</head>
<body>
  <div class="particles" id="particles"></div>

  <header>
    <div class="logo"><i class="fas fa-chart-line"></i><h1>RADNIK QUINCE PORTAL</h1></div>
    <div class="header-info"><p id="userName"></p><p id="clock"></p></div>
    <div class="header-buttons">
      <button class="header-btn" id="userManagementBtn" onclick="openUserManagementModal()"><i class="fas fa-users-cog"></i> User Management</button>
      <button class="header-btn" onclick="openNotepad()"><i class="fas fa-edit"></i> Notepad</button>
      <button class="header-btn" onclick="logout()"><i class="fas fa-sign-out-alt"></i> Logout</button>
    </div>
  </header>

  <div class="popup" id="loginPopup" style="display: flex;">
    <div class="popup-content">
      <h2 class="popup-header"><i class="fas fa-lock"></i> Login</h2>
      <div class="input-group"><label for="username">Username</label><input type="text" id="username" placeholder="Enter username"></div>
      <div class="input-group"><label for="password">Password</label><input type="password" id="password" placeholder="Enter password"></div>
      <div class="checkbox-group"><input type="checkbox" id="rememberMe"><label for="rememberMe">Remember Me</label></div>
      <button class="login-btn" onclick="validateLogin()"><i class="fas fa-sign-in-alt"></i> Login</button>
      <p class="forgot-password"><a href="#"><i class="fas fa-key"></i> Forgot Password?</a></p>
      <p class="error-message" id="errorMessage"></p>
    </div>
  </div>

  <div id="userManagementModal" class="modal">
    <div class="modal-content">
      <div class="modal-header"><h2><i class="fas fa-users-cog"></i> User Management</h2><span class="close-btn" onclick="closeUserManagementModal()">×</span></div>
      <div id="userManagementMessage" class="success-message" style="margin-bottom:15px; display:none;"></div>
      <div class="user-management-grid">
        <div class="user-management-section">
          <h3><i class="fas fa-user-plus"></i> Create New User</h3>
          <div class="input-group"><label for="newUsername">Username</label><input type="text" id="newUsername" placeholder="New username"></div>
          <div class="input-group"><label for="newPassword">Password</label><input type="password" id="newPassword" placeholder="New password"></div>
          <button class="action-btn" onclick="handleCreateUser()"><i class="fas fa-plus-circle"></i> Create User</button>
        </div>
        <div class="user-management-section">
          <h3><i class="fas fa-user-edit"></i> Edit User Permissions</h3>
          <div class="input-group">
            <label for="selectUserForPermissions">Select User</label>
            <select id="selectUserForPermissions" onchange="loadPermissionsForSelectedUser()"><option value="">-- Select User --</option></select>
          </div>
          <div id="permissionsContainer" style="display:none;">
            <h4>Button Access:</h4><div id="permissionsList"></div>
            <button class="action-btn" onclick="handleSavePermissions()" style="margin-top: 20px;"><i class="fas fa-save"></i> Save Permissions</button>
            <button class="action-btn secondary" onclick="handleDeleteUser()" style="margin-top: 10px;" id="deleteUserBtn" disabled><i class="fas fa-user-times"></i> Delete Selected User</button>
          </div>
        </div>
      </div>
    </div>
  </div>

  <div class="container">
    <div class="dashboard-overview" id="dashboardOverviewSection">
      <div class="overview-card"><h3><i class="fas fa-chart-line"></i> GGN/Total Quince Sale Qty</h3><p>361823</p><div class="card-footer"><i class="fas fa-sync-alt"></i> Updated just now</div></div>
      <div class="overview-card"><h3><i class="fas fa-file-alt"></i> GGN/Total Quince Sale Value(cr)</h3><p>₹54.46/-</p><div class="card-footer"><i class="fas fa-sync-alt"></i> Updated today</div></div>
      <div class="overview-card"><h3><i class="fas fa-table"></i> NOIDA/Total Quince Sale Qty</h3><p>54600</p><div class="card-footer"><i class="fas fa-sync-alt"></i> Updated today</div></div>
      <div class="overview-card"><h3><i class="fas fa-star"></i> NOIDA/Total Quince Sale Value(cr)</h3><p>₹6.40/-</p><div class="card-footer"><i class="fas fa-sync-alt"></i> Last added 2 days ago</div></div>
    </div>

    <div class="search-filter-container">
      <div class="search-container"><div class="search-bar"><i class="fas fa-search"></i><input type="text" id="searchInput" placeholder="Search links..."></div></div>
      <div class="filter-tags">
        <div class="filter-tag active" data-filter="all">All</div><div class="filter-tag" data-filter="finance">Finance</div>
        <div class="filter-tag" data-filter="sales">Sales</div><div class="filter-tag" data-filter="inventory">Inventory</div>
        <div class="filter-tag" data-filter="reports">Reports</div><div class="filter-tag" data-filter="tools">Tools</div>
      </div>
    </div>

    <div class="quick-access">
      <div class="quick-btn" onclick="filterByTagManual('finance')"><i class="fas fa-file-invoice-dollar"></i> Finance</div>
      <div class="quick-btn" onclick="filterByTagManual('sales')"><i class="fas fa-chart-bar"></i> Sales Data</div>
      <div class="quick-btn" onclick="filterByTagManual('inventory')"><i class="fas fa-boxes"></i> Inventory</div>
      <div class="quick-btn" onclick="filterByTagManual('reports')"><i class="fas fa-file-pdf"></i> Reports</div>
    </div>

    <div class="section-header"><h2><i class="fas fa-link"></i> All Quick Links</h2></div>
    <div class="button-grid" id="buttonContainer">
      <a href="https://docs.google.com/spreadsheets/d/1p1LreGjZFEWSY3qfkbGaWGymDa_3kzwucDH3xHoPzqU/edit?resourcekey=&gid=1066878755#gid=1066878755" class="btn btn-1" target="_blank" data-tags="finance" data-id="noida-tax-invoice"><i class="fas fa-file-invoice-dollar"></i><span class="btn-text">Noida Tax Invoice Log</span><span class="btn-tag">Finance</span></a>
      <a href="https://docs.google.com/spreadsheets/d/1clgoSGc3BF6u25v-cumlJMqrCOZYSydWJ_xSAOpe0FE/edit?gid=82980654#gid=82980654" class="btn btn-2" target="_blank" data-tags="finance" data-id="186-tax-invoice"><i class="fas fa-file-alt"></i><span class="btn-text">186 Tax Invoice Log</span><span class="btn-tag">Finance</span></a>
      <a href="https://192.168.20.7/vgeinvoice/LoginPage.aspx" class="btn btn-3" target="_blank" data-tags="finance" data-id="eway-bill"><i class="fas fa-truck"></i><span class="btn-text">E-Way Bill Dashboard</span><span class="btn-tag">Finance</span></a>
      <a href="https://smallpdf.com/merge-pdf#r=organize-merge" class="btn btn-4" target="_blank" data-tags="tools" data-id="merge-pdf"><i class="fas fa-file-pdf"></i><span class="btn-text">Merge PDF</span><span class="btn-tag">Tools</span></a>
      <a href="https://www.office.com/apps/?auth=2" class="btn btn-5" target="_blank" data-tags="tools" data-id="app-365"><i class="fas fa-briefcase"></i><span class="btn-text">App 365</span><span class="btn-tag">Tools</span></a>
      <a href="https://docs.google.com/forms/d/e/1FAIpQLSfQf5LaxGX8lLr4nN7hPmrL3mpuaFv1uzYMTaIb02IcGFHp5g/viewform" class="btn btn-6" target="_blank" data-tags="finance" data-id="chargeback-form"><i class="fas fa-clipboard-list"></i><span class="btn-text">Chargeback Form</span><span class="btn-tag">Finance</span></a>
      <a href="https://radnikexports1-my.sharepoint.com/:x:/r/personal/amit_chaudhary_radnikexports1_onmicrosoft_com/_layouts/15/Doc.aspx?sourcedoc=%7B5DE750E6-1A38-4B42-B02D-44A3D95B2D14%7D&file=Book%206.xlsx&action=editnew&mobileredirect=true" class="btn btn-7" target="_blank" data-tags="sales" data-id="daily-sale-186"><i class="fas fa-chart-bar"></i><span class="btn-text">Daily Sale 186</span><span class="btn-tag">Sales</span></a>
      <a href="https://radnikexports1-my.sharepoint.com/:x:/r/personal/amit_chaudhary_radnikexports1_onmicrosoft_com/_layouts/15/Doc.aspx?sourcedoc=%7B866121D0-C91C-4F09-9F0B-909FBB0C2324%7D&file=DAILY%20SALE%20ENTERY%20NOIDA.xlsx&action=default&mobileredirect=true" class="btn btn-8" target="_blank" data-tags="sales" data-id="dsec16-sale"><i class="fas fa-table"></i><span class="btn-text">D-S-E-C16</span><span class="btn-tag">Sales</span></a>
      <a href="https://docs.google.com/spreadsheets/d/11RCeL6pUqN8khww5sY_iA_t-mNgrzwQNvV-bRtLKA9s/edit?gid=0#gid=0" class="btn btn-9" target="_blank" data-tags="inventory" data-id="noida-order-entry"><i class="fas fa-clipboard-check"></i><span class="btn-text">Noida Order Entry</span><span class="btn-tag">Inventory</span></a>
      <a href="https://docs.google.com/spreadsheets/d/1V92jsBq9iTbYnaoaIdmYdbYc9uoFvaimxaYScnHLD7w/edit?resourcekey=&gid=388707961#gid=388707961" class="btn btn-10" target="_blank" data-tags="finance" data-id="chargeback-data"><i class="fas fa-money-bill-wave"></i><span class="btn-text">Chargeback</span><span class="btn-tag">Finance</span></a>
      <a href="https://docs.google.com/spreadsheets/d/17XLwAmZxvmxOaB-DzPIBjuGmb3u_Zxz9_1aGn175yeE/edit?gid=0#gid=0" class="btn btn-11" target="_blank" data-tags="reports" data-id="live-graph-quince"><i class="fas fa-chart-line"></i><span class="btn-text">Live Graph Quince</span><span class="btn-tag">Reports</span></a>
      <a href="https://docs.google.com/spreadsheets/d/1c4VbDj3CCp_Lr2MCpoJXmlp2K9qP6L3pIA0eZq52PDM/edit?gid=2065470756#gid=2065470756" class="btn btn-12" target="_blank" data-tags="reports" data-id="quince-2024-sale"><i class="fas fa-database"></i><span class="btn-text">QUINCE 2024 SALE DATA</span><span class="btn-tag">Reports</span></a>
      <a href="https://docs.google.com/spreadsheets/d/1sehWq-1kvNwl0qZWOpkhapuk9mam0FjKAoJvHMV9U5o/edit?usp=sharing" class="btn btn-13" target="_blank" data-tags="inventory" data-id="maersk-stock-data"><i class="fas fa-ship"></i><span class="btn-text">SEND STOCK BY MAERSK DATA</span><span class="btn-tag">Inventory</span></a>
      <a href="https://docs.google.com/spreadsheets/d/17RWCZ62o2nRvMgZjfi_fZ6AyBQ0YmHNoIp-CCRSxJjg/edit?gid=407320691#gid=407320691" class="btn btn-14" target="_blank" data-tags="sales" data-id="quince-2025-pos"><i class="fas fa-shopping-cart"></i><span class="btn-text">QUINCE 2025 POS DATA</span><span class="btn-tag">Sales</span></a>
      <a href="https://docs.google.com/spreadsheets/d/1riS3U9aPW7s8SQmqaZkGrb2fHVEdDbJdHxwdygaeKXc/edit?gid=1345083956#gid=1345083956" class="btn btn-15" target="_blank" data-tags="sales" data-id="ggn-sales-overview"><i class="fas fa-building"></i><span class="btn-text">Gurugram Sales Overview</span><span class="btn-tag">Sales</span></a>
      <a href="https://docs.google.com/spreadsheets/d/15Xma9DRkRectWPqUKDQlr5yZQMtCfQ2Bxa_J5vU-Es0/edit?gid=1345083956#gid=1345083956" class="btn btn-16" target="_blank" data-tags="sales" data-id="noida-sales-overview"><i class="fas fa-city"></i><span class="btn-text">Noida Sales Overview</span><span class="btn-tag">Sales</span></a>
      <a href="https://sites.google.com/view/bossanishji/" class="btn btn-17" target="_blank" data-tags="tools" data-id="anish-sir-site"><i class="fas fa-user-tie"></i><span class="btn-text">Anish Sir</span><span class="btn-tag">Tools</span></a>
      <a href="https://sites.google.com/view/radnikaks/home?authuser=0" class="btn btn-18" target="_blank" data-tags="tools" data-id="amit-chaudhary-site"><i class="fas fa-user"></i><span class="btn-text">Amit Chaudhary</span><span class="btn-tag">Tools</span></a>
      <a href="https://docs.google.com/spreadsheets/d/e/2PACX-1vQ_ihmuGBmPjY_SF6zXQe825cL0i3O9FjTod0gVVgjvc9uSU1HrQsSxcGSVRLAUrJA8NjruJPKs7ezi/pubhtml?gid=1345083956&single=true" class="btn btn-19" target="_blank" data-tags="reports" data-id="186-qs-view"><i class="fas fa-chart-pie"></i><span class="btn-text">186-Q-S-VIEW</span><span class="btn-tag">Reports</span></a>
      <a href="https://docs.google.com/spreadsheets/d/e/2PACX-1vT1MRNcqWJsXyp4gKAq00N2qKmjoNgXkwVCmxH2lBeeitlz0kNfSiY-z1sNK2JTciPN6mzUpF9-G36Z/pubhtml?gid=1345083956&single=true" class="btn btn-20" target="_blank" data-tags="reports" data-id="c16-qs-view"><i class="fas fa-chart-area"></i><span class="btn-text">C16-Q-S-VIEW</span><span class="btn-tag">Reports</span></a>
      <a href="https://docs.google.com/spreadsheets/d/1m3q0x9wKoM7Q7EBSCvpCTozbtB0-73xmgOO_Yx0EBAg/edit?gid=579600821#gid=579600821" class="btn btn-21" target="_blank" data-tags="inventory" data-id="c16-import-details"><i class="fas fa-boxes"></i><span class="btn-text">C16-IMPORT DETAILS</span><span class="btn-tag">Inventory</span></a>
      <a href="https://docs.google.com/spreadsheets/d/1LZa3JvfEdt-9cdQkEmsEluwurMoDzmsXIyFWNpAcnfs/edit?gid=1102120828#gid=1102120828" class="btn btn-22" target="_blank" data-tags="inventory" data-id="ggn-prep-2025"><i class="fas fa-tasks"></i><span class="btn-text">GGN-PREPEMENT 2025</span><span class="btn-tag">Inventory</span></a>
      <a href="https://docs.google.com/spreadsheets/d/1l2CnQrl9YEfOFAoiqj82DYwJ-zQWYqCX5HuL87ffRlw/edit?gid=2040776333#gid=2040776333" class="btn btn-23" target="_blank" data-tags="reports" data-id="quince-hk"><i class="fas fa-globe-asia"></i><span class="btn-text">Quince Hong Kong</span><span class="btn-tag">Reports</span></a>
      <a href="https://docs.google.com/spreadsheets/d/1QzAuxxuLUz60iWbdiVGzAFDjXY0RSZIda_0VOhbloEU/edit?gid=1012800260#gid=1012800260" class="btn btn-24" target="_blank" data-tags="reports" data-id="projection-vs-sales"><i class="fas fa-chart-pie"></i><span class="btn-text">Projection VS Sales Report</span><span class="btn-tag">Reports</span></a>
      <a href="https://docs.google.com/spreadsheets/d/1JFI22zsy2Pa5d2lq4dcEeCZIg7rqFaBMYPzniBdlhMc/edit?gid=874524179#gid=874524179" class="btn btn-25" target="_blank" data-tags="reports" data-id="quince-order-chart"><i class="fas fa-shopping-basket"></i><span class="btn-text">QUINCE ORDER CHART</span><span class="btn-tag">Reports</span></a>
      <a href="https://docs.google.com/spreadsheets/d/1f7bODkOgwvN_i-nWItzn_67IZv0EqXxAqr2v-ZRQ8Vg/edit?gid=685323596#gid=685323596" class="btn btn-26" target="_blank" data-tags="reports" data-id="projection-vs-actual"><i class="fas fa-project-diagram"></i><span class="btn-text">PROJECTION VS ACTUAL</span><span class="btn-tag">Reports</span></a>
      <a href="https://docs.google.com/spreadsheets/d/1_5-nGWZmyI5WkTSp6muKe7uEhel7DoAzX1oisoBz1Xw/edit?gid=211447390#gid=211447390" class="btn btn-27" target="_blank" data-tags="reports" data-id="quince-sale-hub"><i class="fas fa-hubspot"></i><span class="btn-text">Quince Sale All Data Hub</span><span class="btn-tag">Reports</span></a>
      <a href="https://docs.google.com/spreadsheets/d/1bQqiCaiQ_JGN_B-415ftvVgoH9MmaF9A4ydZkkYXS-Q/edit?gid=5003036#gid=5003036" class="btn btn-28" target="_blank" data-tags="inventory" data-id="po-wise-qty"><i class="fas fa-exchange-alt"></i><span class="btn-text">PO Wise Qty Send/Sale/Available</span><span class="btn-tag">Inventory</span></a>
      <a href="https://amitaadhya.github.io/Quincesaleggn/" class="btn btn-19" target="_blank" data-tags="reports" data-id="sales-perf-ggn"><i class="fas fa-chart-pie"></i><span class="btn-text">Sales Performance Dashboard-GGN</span><span class="btn-tag">Reports</span></a>
      <a href="https://amitaadhya.github.io/noidaquincesale/" class="btn btn-19" target="_blank" data-tags="reports" data-id="sales-perf-noida"><i class="fas fa-chart-pie"></i><span class="btn-text">NOIDA-Sales Performance Dashboard</span><span class="btn-tag">Reports</span></a>
    </div>

    <div class="recent-links" id="recentLinksSection">
      <div class="section-header"><h2><i class="fas fa-history"></i> Recently Accessed</h2></div>
      <div class="recent-grid" id="recentLinksContainer"></div>
    </div>
  </div>

  <footer>
    <div class="footer-content">
      <p>© 2025 Radnik Exports Global Pvt. Ltd. | Designed by Amit Chaudhary</p>
      <div class="social-links">
        <a href="#" target="_blank"><i class="fab fa-facebook"></i></a><a href="#" target="_blank"><i class="fab fa-twitter"></i></a>
        <a href="#" target="_blank"><i class="fab fa-instagram"></i></a><a href="#" target="_blank"><i class="fab fa-linkedin"></i></a>
      </div>
    </div>
  </footer>

  <button id="backToTop" title="Go to top"><i class="fas fa-arrow-up"></i></button>
  <div id="notification" class="notification"></div>

<script>
    // --- Constants & State Variables ---
    const USERS_KEY = 'radnikPortalUsers';
    const USER_PERMISSIONS_KEY = 'radnikPortalUserPermissions';
    const GLOBAL_BUTTON_STATES_KEY = 'radnikButtonStates';
    const RECENT_LINKS_KEY = 'recentLinks';
    const USER_NOTES_KEY = 'userNotes';
    const DASHBOARD_SECTION_ID = 'dashboardOverviewSection';
    const RECENT_LINKS_SECTION_ID = 'recentLinksSection';

    let currentUser = null;
    document.documentElement.style.setProperty('--particle-float-x', (Math.random() > 0.5 ? '800px' : '-800px'));

    // --- Core Data Management ---
    function getFromLocalStorage(key, defaultValue = []) {
        const itemJson = localStorage.getItem(key);
        try { return itemJson ? JSON.parse(itemJson) : defaultValue; }
        catch (e) { console.error(`Error parsing localStorage key "${key}":`, e); return defaultValue; }
    }
    function saveToLocalStorage(key, data) {
        try { localStorage.setItem(key, JSON.stringify(data)); }
        catch (e) { console.error(`Error saving to localStorage key "${key}":`, e); }
    }
    function getUsers() { return getFromLocalStorage(USERS_KEY, []); }
    function saveUsers(users) { saveToLocalStorage(USERS_KEY, users); }
    function getUserPermissions() { return getFromLocalStorage(USER_PERMISSIONS_KEY, {}); }
    function saveUserPermissions(permissions) { saveToLocalStorage(USER_PERMISSIONS_KEY, permissions); }
    function getGlobalButtonStates() { return getFromLocalStorage(GLOBAL_BUTTON_STATES_KEY, {}); }
    function saveGlobalButtonState(buttonId, isGloballyDisabled) {
        const states = getGlobalButtonStates();
        if (isGloballyDisabled) states[buttonId] = true;
        else delete states[buttonId];
        saveToLocalStorage(GLOBAL_BUTTON_STATES_KEY, states);
    }
    function simpleHash(password) {
        if (typeof password !== 'string') return '';
        let hash = 0;
        for (let i = 0; i < password.length; i++) {
            const char = password.charCodeAt(i);
            hash = ((hash << 5) - hash) + char;
            hash |= 0; 
        }
        return "hashed_" + (hash * 0xDEADBEEF).toString(16) + "_salted_v2";
    }

    function initializeDefaultAdmin() {
        let users = getUsers();
        const adminUsername = 'admin'; const amitUsername = 'amit';
        const adminPasswordHash = simpleHash('123'); const amitPasswordHash = simpleHash('123');
        let adminUser = users.find(u => u.username === adminUsername);
        let amitUser = users.find(u => u.username === amitUsername);
        let updated = false;

        if (!adminUser) {
            users.push({ username: adminUsername, password: adminPasswordHash });
            updated = true; console.log("Default admin user created.");
        } else if (adminUser.password !== adminPasswordHash) {
            adminUser.password = adminPasswordHash; 
            updated = true; console.log("Default admin password updated.");
        }
        if (!amitUser) {
            users.push({ username: amitUsername, password: amitPasswordHash });
            updated = true; console.log("Default amit user created.");
        } else if (amitUser.password !== amitPasswordHash) {
            amitUser.password = amitPasswordHash; 
            updated = true; console.log("Default amit password updated.");
        }
        if (updated) saveUsers(users);
    }

    // --- UI Helper Functions ---
    function showNotification(message, isError = false) {
        const el = document.getElementById('notification');
        if (!el) return;
        el.textContent = message;
        el.style.background = isError ? 'linear-gradient(135deg, var(--accent), #c51162)' : 'linear-gradient(135deg, var(--primary), var(--secondary))';
        el.style.display = 'block';
        setTimeout(() => { el.style.display = 'none'; }, 3000);
    }
    function showUserManagementMessage(message, isError = false) {
        const el = document.getElementById('userManagementMessage');
        if(!el) return;
        el.innerHTML = `<i class="fas ${isError ? 'fa-exclamation-triangle' : 'fa-check-circle'}"></i> ${message}`;
        el.className = isError ? 'error-message' : 'success-message';
        el.style.display = 'block';
    }
    function clearUserManagementMessages() {
        const el = document.getElementById('userManagementMessage');
        if(el) el.style.display = 'none';
    }
    function isUserAdmin() { return currentUser && currentUser.username === 'admin'; }

    // --- Authentication & Session ---
    function validateLogin() {
        const usernameInput = document.getElementById('username');
        const passwordInput = document.getElementById('password');
        const errorMessageEl = document.getElementById('errorMessage');
        const loginPopup = document.getElementById('loginPopup');
        const userMgmtBtn = document.getElementById('userManagementBtn');

        const username = usernameInput.value.trim();
        const password = passwordInput.value.trim();

        if (errorMessageEl) errorMessageEl.style.display = 'none';

        if (!username || !password) {
            if (errorMessageEl) {
                errorMessageEl.innerHTML = '<i class="fas fa-exclamation-circle"></i> Username & Password required.';
                errorMessageEl.style.display = 'block';
                setTimeout(() => { if (errorMessageEl) errorMessageEl.style.display = 'none'; }, 3000);
            } else showNotification("Username and Password required.", true);
            return;
        }

        const users = getUsers();
        const passwordHashToCompare = simpleHash(password);
        const foundUser = users.find(user => user.username === username && user.password === passwordHashToCompare);

        if (foundUser) {
            currentUser = foundUser;
            if (loginPopup) loginPopup.style.display = 'none';
            const container = document.querySelector('.container');
            const footer = document.querySelector('footer');
            if (container) container.style.display = 'block';
            if (footer) footer.style.display = 'block';
            const userNameEl = document.getElementById('userName');
            if (userNameEl) userNameEl.textContent = `User: ${currentUser.username}`;
            
            document.body.classList.toggle('admin-mode', isUserAdmin());
            if (userMgmtBtn) userMgmtBtn.style.display = isUserAdmin() ? 'flex' : 'none';
            
            if (isUserAdmin()) setupGlobalButtonManagement();
            else document.querySelectorAll('.admin-toggle').forEach(toggle => toggle.remove());
            
            applySectionVisibility(); 
            applyButtonVisibility();
            showNotification('Login successful!');
            // initializeRecentLinks is now called within applySectionVisibility if admin
            usernameInput.value = ''; passwordInput.value = '';
        } else {
            if (errorMessageEl) {
                errorMessageEl.innerHTML = '<i class="fas fa-exclamation-circle"></i> Invalid username or password.';
                errorMessageEl.style.display = 'block';
                setTimeout(() => { if (errorMessageEl) errorMessageEl.style.display = 'none'; }, 3000);
            } else showNotification("Invalid username or password.", true);
        }
    }

    function logout() {
        currentUser = null;
        const container = document.querySelector('.container');
        const footer = document.querySelector('footer');
        const loginPopup = document.getElementById('loginPopup');
        if (container) container.style.display = 'none';
        if (footer) footer.style.display = 'none';
        if (loginPopup) loginPopup.style.display = 'flex';
        const userNameEl = document.getElementById('userName');
        if (userNameEl) userNameEl.textContent = '';
        document.body.classList.remove('admin-mode');
        const userMgmtBtn = document.getElementById('userManagementBtn');
        if (userMgmtBtn) userMgmtBtn.style.display = 'none';
        document.querySelectorAll('.admin-toggle').forEach(toggle => toggle.remove());
        
        applySectionVisibility(); 
        loadGlobalButtonStatesForLoggedOutView();
        showNotification('You have been logged out.');
    }
    
    // --- Section Visibility Control ---
    function applySectionVisibility() {
        const dashboardSection = document.getElementById(DASHBOARD_SECTION_ID);
        const recentLinksSection = document.getElementById(RECENT_LINKS_SECTION_ID);
        const showAdminSections = isUserAdmin();

        if (dashboardSection) dashboardSection.style.display = showAdminSections ? 'grid' : 'none';
        else console.warn(`Element ID "${DASHBOARD_SECTION_ID}" not found.`);

        if (recentLinksSection) {
            recentLinksSection.style.display = showAdminSections ? 'block' : 'none';
            if(showAdminSections) initializeRecentLinks(); // Populate if visible
            else { // Clear if hidden
                const recentLinksContainer = document.getElementById('recentLinksContainer');
                if(recentLinksContainer) recentLinksContainer.innerHTML = '';
            }
        } 
        else console.warn(`Element ID "${RECENT_LINKS_SECTION_ID}" not found.`);
    }

    // --- Button Visibility & Access Control ---
    function assignButtonIdsAndTextWrappers() {
        document.querySelectorAll('#buttonContainer .btn').forEach((button, index) => {
            if (!button.dataset.id) {
                const href = button.getAttribute('href') || '';
                button.dataset.id = `btn-${(href.replace(/[^a-zA-Z0-9-_]/g, '') || 'link') + '-' + index}`;
            }
            if (!button.querySelector('.btn-text')) {
                const icon = button.querySelector('i:first-child');
                const tag = button.querySelector('.btn-tag');
                let textContent = '';
                const childNodes = Array.from(button.childNodes);
                childNodes.forEach(node => {
                    if (node.nodeType === Node.TEXT_NODE && node.textContent.trim()) {
                        textContent += node.textContent.trim() + ' ';
                        button.removeChild(node);
                    }
                });
                if (textContent.trim()) {
                    const span = document.createElement('span');
                    span.className = 'btn-text';
                    span.textContent = textContent.trim();
                    if (icon && icon.nextSibling) button.insertBefore(span, icon.nextSibling);
                    else if (icon) button.appendChild(span);
                    else if (tag) button.insertBefore(span,tag);
                    else button.prepend(span);
                }
            }
        });
    }
    
    function addAdminGlobalToggles() {
        const globalStates = getGlobalButtonStates();
        document.querySelectorAll('#buttonContainer .btn').forEach(button => {
            const buttonId = button.dataset.id;
            if (!buttonId || button.querySelector('.admin-toggle')) return;

            const isGloballyDisabled = globalStates[buttonId] === true;
            const toggle = document.createElement('span');
            toggle.className = 'admin-toggle';
            toggle.innerHTML = `<i class="fas ${isGloballyDisabled ? 'fa-toggle-on' : 'fa-toggle-off'}"></i>`;
            toggle.title = "Toggle global link availability";
            
            const btnTag = button.querySelector('.btn-tag');
            if(btnTag) button.insertBefore(toggle, btnTag); else button.appendChild(toggle);

            toggle.addEventListener('click', (event) => {
                event.preventDefault(); event.stopPropagation();
                const currentGlobalState = getGlobalButtonStates()[buttonId] === true;
                saveGlobalButtonState(buttonId, !currentGlobalState);
                applyButtonVisibility(); 
            });
        });
    }

    function loadGlobalButtonStatesForAdminView() {
        const globalStates = getGlobalButtonStates();
        document.querySelectorAll('#buttonContainer .btn').forEach(button => {
            const buttonId = button.dataset.id;
            if (!buttonId) return;
            const isGloballyDisabled = globalStates[buttonId] === true;
            button.classList.toggle('globally-disabled-admin-view', isGloballyDisabled);
            const toggleIcon = button.querySelector('.admin-toggle i');
            if (toggleIcon) toggleIcon.className = `fas ${isGloballyDisabled ? 'fa-toggle-on' : 'fa-toggle-off'}`;
        });
    }
    
    function loadGlobalButtonStatesForLoggedOutView() {
        const globalStates = getGlobalButtonStates();
        document.querySelectorAll('#buttonContainer .btn').forEach(button => {
            const buttonId = button.dataset.id;
            button.classList.remove('globally-disabled-admin-view');
            button.style.display = (buttonId && globalStates[buttonId]) ? 'none' : 'flex';
        });
        filterBySearchAndTag();
    }

    function setupGlobalButtonManagement() { addAdminGlobalToggles(); loadGlobalButtonStatesForAdminView(); }

    function applyButtonVisibility() {
        const globalStates = getGlobalButtonStates();
        const allUserPerms = getUserPermissions();
        const userPermittedIds = (currentUser && allUserPerms[currentUser.username]) ? allUserPerms[currentUser.username] : [];

        document.querySelectorAll('#buttonContainer .btn').forEach(button => {
            const buttonId = button.dataset.id;
            button.classList.remove('globally-disabled-admin-view');
            button.style.display = 'flex'; 

            if (!buttonId) return;
            const isGloballyDisabled = globalStates[buttonId] === true;

            if (isUserAdmin()) {
                button.classList.toggle('globally-disabled-admin-view', isGloballyDisabled);
                const toggleIcon = button.querySelector('.admin-toggle i');
                if (toggleIcon) toggleIcon.className = `fas ${isGloballyDisabled ? 'fa-toggle-on' : 'fa-toggle-off'}`;
            } else {
                if (isGloballyDisabled || !userPermittedIds.includes(buttonId)) {
                    button.style.display = 'none';
                }
            }
        });
        filterBySearchAndTag();
    }

    // --- User Management Modal ---
    function openUserManagementModal() { 
        const modal = document.getElementById('userManagementModal');
        if (modal) {
            modal.style.display = 'block';
            populateUsersDropdown();
            const permsContainer = document.getElementById('permissionsContainer');
            if (permsContainer) permsContainer.style.display = 'none';
            const delBtn = document.getElementById('deleteUserBtn');
            if (delBtn) delBtn.disabled = true;
            clearUserManagementMessages();
        }
    }
    function closeUserManagementModal() { 
        const modal = document.getElementById('userManagementModal');
        if (modal) modal.style.display = 'none';
    }
    function handleCreateUser() { 
        const newUsernameInput = document.getElementById('newUsername');
        const newPasswordInput = document.getElementById('newPassword');
        const newUsername = newUsernameInput.value.trim();
        const newPassword = newPasswordInput.value.trim();

        if (!newUsername || !newPassword) { showUserManagementMessage('Username and password required.', true); return; }
        if (newUsername === 'admin') { showUserManagementMessage('Cannot create user "admin".', true); return; }

        let users = getUsers();
        if (users.some(u => u.username === newUsername)) { showUserManagementMessage(`User "${newUsername}" already exists.`, true); return; }

        users.push({ username: newUsername, password: simpleHash(newPassword) });
        saveUsers(users);
        showUserManagementMessage(`User "${newUsername}" created successfully.`);
        newUsernameInput.value = ''; newPasswordInput.value = '';
        populateUsersDropdown();
    }
    function populateUsersDropdown() { 
        const selectUserEl = document.getElementById('selectUserForPermissions');
        if (!selectUserEl) return;
        const users = getUsers().filter(u => u.username !== 'admin');
        const currentVal = selectUserEl.value;
        selectUserEl.innerHTML = '<option value="">-- Select User --</option>';
        users.forEach(user => {
            const option = document.createElement('option');
            option.value = user.username; option.textContent = user.username;
            selectUserEl.appendChild(option);
        });
        if (users.find(u=>u.username === currentVal)) {
             selectUserEl.value = currentVal;
        } else {
             const permsContainer = document.getElementById('permissionsContainer');
             if (permsContainer) permsContainer.style.display = 'none';
             const delBtn = document.getElementById('deleteUserBtn');
             if (delBtn) delBtn.disabled = true;
        }
    }
    function loadPermissionsForSelectedUser() { 
        const selectedUsername = document.getElementById('selectUserForPermissions').value;
        const permissionsContainer = document.getElementById('permissionsContainer');
        const permissionsListDiv = document.getElementById('permissionsList');
        const deleteBtn = document.getElementById('deleteUserBtn');

        if (!selectedUsername) {
            if (permissionsContainer) permissionsContainer.style.display = 'none';
            if (deleteBtn) deleteBtn.disabled = true;
            return;
        }
        if (deleteBtn) deleteBtn.disabled = false;
        if (permissionsContainer) permissionsContainer.style.display = 'block';
        if (permissionsListDiv) permissionsListDiv.innerHTML = '';

        const allUserPerms = getUserPermissions();
        const userSpecificPerms = allUserPerms[selectedUsername] || [];

        document.querySelectorAll('#buttonContainer .btn').forEach(button => {
            const buttonId = button.dataset.id;
            const btnTextSpan = button.querySelector('.btn-text');
            const buttonText = btnTextSpan ? btnTextSpan.textContent.trim() : `Button (ID: ${buttonId})`;
            if (!buttonId || !permissionsListDiv) return;

            const itemDiv = document.createElement('div'); itemDiv.className = 'permission-item';
            const checkbox = document.createElement('input'); checkbox.type = 'checkbox';
            checkbox.id = `perm-${buttonId}-${selectedUsername}`; checkbox.value = buttonId;
            checkbox.checked = userSpecificPerms.includes(buttonId);
            const label = document.createElement('label'); label.htmlFor = checkbox.id; label.textContent = buttonText;
            
            const icon = button.querySelector('i:first-child');
            if(icon) { const iClone = icon.cloneNode(true); itemDiv.appendChild(iClone); }
            
            itemDiv.appendChild(checkbox); itemDiv.appendChild(label);
            permissionsListDiv.appendChild(itemDiv);
        });
    }
    function handleSavePermissions() { 
        const selectedUsername = document.getElementById('selectUserForPermissions').value;
        if (!selectedUsername) { showUserManagementMessage('Select a user first.', true); return; }

        const allowedButtonIds = Array.from(document.querySelectorAll('#permissionsList input[type="checkbox"]:checked')).map(cb => cb.value);
        let allUserPerms = getUserPermissions();
        allUserPerms[selectedUsername] = allowedButtonIds;
        saveUserPermissions(allUserPerms);
        showUserManagementMessage(`Permissions saved for ${selectedUsername}.`);
        if (currentUser && currentUser.username === selectedUsername) applyButtonVisibility();
    }
    function handleDeleteUser() { 
        const selectedUsername = document.getElementById('selectUserForPermissions').value;
        if (!selectedUsername || selectedUsername === 'admin') { showUserManagementMessage('Select a valid user to delete.', true); return; }
        if (!confirm(`Are you sure you want to delete user "${selectedUsername}"? This action cannot be undone.`)) return;

        let users = getUsers();
        saveUsers(users.filter(u => u.username !== selectedUsername));
        let permissions = getUserPermissions();
        delete permissions[selectedUsername];
        saveUserPermissions(permissions);

        showUserManagementMessage(`User "${selectedUsername}" deleted successfully.`);
        populateUsersDropdown();
        const permsContainer = document.getElementById('permissionsContainer');
        if (permsContainer) permsContainer.style.display = 'none';
        const delBtn = document.getElementById('deleteUserBtn');
        if(delBtn) delBtn.disabled = true;
    }

    // --- Feature Functions ---
    function createParticles() { 
        const container = document.getElementById('particles');
        if (!container) return;
        container.innerHTML = ''; 
        const count = Math.floor(window.innerWidth / 35);
        for (let i = 0; i < count; i++) {
            const p = document.createElement('div'); p.classList.add('particle');
            const size = Math.random() * 3.5 + 1; 
            p.style.width = `${size}px`; p.style.height = `${size}px`;
            p.style.left = `${Math.random() * window.innerWidth}px`;
            p.style.top = `${Math.random() * (window.innerHeight + 300)}px`;
            p.style.opacity = Math.random() * 0.35 + 0.05; 
            p.style.animationDuration = `${Math.random() * 25 + 20}s`; 
            p.style.animationDelay = `${Math.random() * 25}s`;
            container.appendChild(p);
        }
    }
    function openNotepad() { 
        const existingNotepad = document.getElementById('notepad-dynamic-container');
        if (existingNotepad) { existingNotepad.remove(); return; }

        const container = document.createElement('div'); container.id = 'notepad-dynamic-container';
        Object.assign(container.style, {
            position: 'fixed', top: '50%', left: '50%', transform: 'translate(-50%, -50%)',
            background: 'rgba(30, 30, 46, 0.97)', padding: '25px', borderRadius: '15px',
            boxShadow: '0 10px 35px rgba(0,0,0,0.6)', width: '90%', maxWidth: '600px',
            zIndex: '1002', border: '1px solid rgba(255,255,255,0.15)'
        });
        const textarea = document.createElement('textarea');
        Object.assign(textarea.style, {
            width: '100%', height: '300px', borderRadius: '8px', padding: '15px',
            border: '1px solid rgba(255,255,255,0.25)', fontSize: '1rem', 
            backgroundColor: 'rgba(0,0,0,0.35)', color: '#fff', marginBottom: '15px', backdropFilter: 'blur(3px)'
        });
        textarea.placeholder = 'Type your notes here...';
        textarea.value = localStorage.getItem(USER_NOTES_KEY) || '';

        const btnDiv = document.createElement('div'); btnDiv.style.display = 'flex'; btnDiv.style.justifyContent = 'space-between';
        const saveBtn = document.createElement('button'); saveBtn.innerHTML = '<i class="fas fa-save"></i> Save Notes'; saveBtn.className = 'header-btn';
        Object.assign(saveBtn.style, { width: 'calc(50% - 5px)', marginRight: '10px' });
        saveBtn.onclick = () => { localStorage.setItem(USER_NOTES_KEY, textarea.value); showNotification('Notes saved!'); };
        const closeBtn = document.createElement('button'); closeBtn.innerHTML = '<i class="fas fa-times"></i> Close'; closeBtn.className = 'header-btn';
        Object.assign(closeBtn.style, { width: 'calc(50% - 5px)', background: 'linear-gradient(135deg, #e53935, #c62828)' }); 
        closeBtn.onclick = () => container.remove();
        
        btnDiv.append(saveBtn, closeBtn);
        container.append(textarea, btnDiv);
        document.body.appendChild(container);
        textarea.focus();
    }
    function updateClock() { 
        const clockEl = document.getElementById('clock');
        if (clockEl) clockEl.textContent = new Date().toLocaleDateString('en-US', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric', hour: '2-digit', minute: '2-digit' });
    }
    function filterBySearchAndTag() { 
        const searchTerm = (document.getElementById('searchInput')?.value || '').toLowerCase();
        const activeFilterTag = document.querySelector('.filter-tag.active');
        const activeTagFilter = activeFilterTag ? activeFilterTag.dataset.filter : 'all';

        document.querySelectorAll('#buttonContainer .btn').forEach(button => {
            const isAdminViewingGloballyDisabled = isUserAdmin() && button.classList.contains('globally-disabled-admin-view');
            if (!isUserAdmin() && button.style.display === 'none') return;

            const btnTextSpan = button.querySelector('.btn-text');
            const buttonText = btnTextSpan ? btnTextSpan.textContent.toLowerCase() : '';
            const buttonTags = button.dataset.tags || '';

            const matchesSearch = searchTerm === '' || buttonText.includes(searchTerm);
            const matchesTag = activeTagFilter === 'all' || buttonTags.includes(activeTagFilter);
            
            if (isAdminViewingGloballyDisabled) {
                 button.style.display = (matchesSearch && matchesTag) ? 'flex' : 'none';
            } else if (button.style.display !== 'none') {
                 button.style.display = (matchesSearch && matchesTag) ? 'flex' : 'none';
            }
        });
    }
    function filterByTagManual(tag) {
        document.querySelectorAll('.filter-tag').forEach(t => t.classList.remove('active'));
        const newActiveTag = document.querySelector(`.filter-tag[data-filter="${tag}"]`);
        if (newActiveTag) newActiveTag.classList.add('active');
        else { 
            const allTag = document.querySelector('.filter-tag[data-filter="all"]');
            if (allTag) allTag.classList.add('active');
        }
        filterBySearchAndTag();
    }
    function initializeRecentLinks() { 
        const container = document.getElementById('recentLinksContainer');
        if (!isUserAdmin() || !container) { // Also check if container exists
            if (container) container.innerHTML = '';
            return;
        }
        container.innerHTML = '';
        const links = getFromLocalStorage(RECENT_LINKS_KEY, []);
        links.slice(0, 4).forEach(link => {
            const item = document.createElement('div'); item.className = 'recent-item';
            item.innerHTML = `<div class="recent-icon"><i class="${link.icon || 'fas fa-link'}"></i></div>
                              <div class="recent-info"><h4>${link.title || 'Untitled Link'}</h4><p>Accessed ${formatTime(link.timestamp)}</p></div>`;
            item.onclick = () => window.open(link.url, '_blank');
            container.appendChild(item);
        });
    }
    function formatTime(timestamp) { 
        const diff = new Date() - new Date(timestamp); const oneDay = 86400000;
        const days = Math.floor(diff / oneDay); if (days > 0) return `${days}d ago`;
        const hours = Math.floor((diff % oneDay) / 3600000); if (hours > 0) return `${hours}h ago`;
        const mins = Math.floor((diff % 3600000) / 60000); if (mins > 0) return `${mins}m ago`;
        return 'just now';
    }
    
    let trackedButtonListeners = new Map(); 

    function setupRecentLinkTracking() {
        document.querySelectorAll('#buttonContainer .btn').forEach(button => {
            const buttonId = button.dataset.id;
            if (!buttonId) return;

            if (trackedButtonListeners.has(button)) { // Remove old listener if exists for this specific element instance
                button.removeEventListener('click', trackedButtonListeners.get(button));
                trackedButtonListeners.delete(button);
            }

            const listener = function(event) {
                if (isUserAdmin() && this.classList.contains('globally-disabled-admin-view')) {
                    if (!event.target.closest('.admin-toggle')) { event.preventDefault(); showNotification("Link globally disabled. Use toggle.", true); }
                    return; 
                }
                if (this.style.display === 'none') { event.preventDefault(); return; }

                const url = this.getAttribute('href');
                if (!url || url === '#') return;
                const titleSpan = this.querySelector('.btn-text');
                const title = titleSpan ? titleSpan.textContent.trim() : 'Unknown Link';
                const iconClass = this.querySelector('i:first-child') ? this.querySelector('i:first-child').className : 'fas fa-link';

                let links = getFromLocalStorage(RECENT_LINKS_KEY, []);
                links = links.filter(l => l.url !== url); 
                links.unshift({ url, title, icon: iconClass, timestamp: new Date().toISOString() });
                saveToLocalStorage(RECENT_LINKS_KEY, links.slice(0, 4));
                if (isUserAdmin()) initializeRecentLinks(); // Only admin sees recent links panel
            };
            
            button.addEventListener('click', listener);
            trackedButtonListeners.set(button, listener);
        });
    }

    function setupBackToTopButton() {
        const btn = document.getElementById('backToTop');
        if(!btn) return;
        window.addEventListener('scroll', () => { btn.style.display = (window.scrollY > 300) ? 'flex' : 'none'; });
        btn.addEventListener('click', () => window.scrollTo({ top: 0, behavior: 'smooth' }));
    }

    // --- Event Listeners Setup ---
    function setupEventListeners() {
        const searchInputEl = document.getElementById('searchInput');
        if (searchInputEl) searchInputEl.addEventListener('input', filterBySearchAndTag);
        
        document.querySelectorAll('.filter-tag').forEach(tag => {
            tag.addEventListener('click', function() {
                document.querySelectorAll('.filter-tag').forEach(t => t.classList.remove('active'));
                this.classList.add('active');
                filterBySearchAndTag();
            });
        });
        
        const loginPopupEl = document.getElementById('loginPopup');
        if (loginPopupEl) {
            loginPopupEl.addEventListener('keypress', (e) => {
                if (e.key === 'Enter' && (document.activeElement.id === 'username' || document.activeElement.id === 'password')) {
                    validateLogin();
                }
            });
        }
        
        const userModalEl = document.getElementById('userManagementModal');
        if(userModalEl) {
            window.addEventListener('click', (event) => { 
                if (event.target == userModalEl) closeUserManagementModal(); 
            });
        }
    }

    // --- Initial Load ---
    document.addEventListener('DOMContentLoaded', () => {
        initializeDefaultAdmin(); 
        assignButtonIdsAndTextWrappers();
        createParticles();
        updateClock(); setInterval(updateClock, 60000);
        setupBackToTopButton();
        setupEventListeners();
        
        applySectionVisibility(); // Initial hide for admin-only sections
        loadGlobalButtonStatesForLoggedOutView();
        // initializeRecentLinks(); // Now called within applySectionVisibility
        setupRecentLinkTracking(); 
    });

    window.addEventListener('resize', createParticles);

</script>
</body>
</html>
